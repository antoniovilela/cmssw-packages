#include "DataFormats/Common/interface/Handle.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include <vector>

template <class T>
ScaledObjectProducer<T>::ScaledObjectProducer(const edm::ParameterSet& pset):
  srcTag_(pset.getParameter<edm::InputTag>("src")),
  scale_(pset.getParameter<double>("scale")){
  
  produces<std::vector<T> >();
}

template <class T>
void ScaledObjectProducer<T>::produce(edm::Event& event, const edm::EventSetup& setup){
  //Get src collection
  edm::Handle<std::vector<T> > collectionH;
  event.getByLabel(srcTag_,collectionH);
  const std::vector<T>& srcColl = *collectionH;

  std::auto_ptr<std::vector<T> > outColl(new std::vector<T>);
  outColl->reserve(srcColl.size());

  typename std::vector<T>::const_iterator obj = srcColl.begin();
  typename std::vector<T>::const_iterator coll_end = srcColl.end(); 
  for(; obj != coll_end; ++obj){
     // Create scaled objects
     T scaledObject(*obj);
     scaledObject.setP4(scaledObject.p4()*scale_);
     outColl->push_back(scaledObject);
  }

  // Put in event
  event.put(outColl);
}
