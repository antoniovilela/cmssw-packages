#include "DataFormats/Common/interface/Handle.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"

namespace analysisTools {

template <class InputCollection, class OutputCollection, class ClonePolicy>
ScaledObjectProducer<InputCollection,OutputCollection,ClonePolicy>::ScaledObjectProducer(const edm::ParameterSet& pset):
  srcTag_(pset.getParameter<edm::InputTag>("src")),
  scale_(pset.getParameter<double>("scale")){
  
  produces<OutputCollection>();
}

template <class InputCollection, class OutputCollection, class ClonePolicy>
void ScaledObjectProducer<InputCollection,OutputCollection,ClonePolicy>::produce(edm::Event& event, const edm::EventSetup& setup){
  //Get src collection
  edm::Handle<InputCollection> collectionH;
  event.getByLabel(srcTag_,collectionH);
  const InputCollection& srcColl = *collectionH;

  std::auto_ptr<OutputCollection> outColl(new OutputCollection);

  typename InputCollection::const_iterator obj = srcColl.begin();
  typename InputCollection::const_iterator coll_end = srcColl.end(); 
  for(; obj != coll_end; ++obj){
     // Create scaled objects
     //typename OutputCollection::value_type scaledObject(*obj);
     typename ClonePolicy::value_type scaledObject = ClonePolicy::convert( *obj );  
     scaledObject.setP4(scaledObject.p4()*scale_);
     outColl->push_back(scaledObject);
  }

  // Put in event
  event.put(outColl);
}

} // namespace
